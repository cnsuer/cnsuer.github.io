<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Restver's Blog</title><description>Programming &amp; Life</description><link>https://cnsuer.github.io</link><language>zh</language><lastBuildDate>Tue, 19 Sep 2023 22:34:52 +0800</lastBuildDate><pubDate>Tue, 19 Sep 2023 22:34:52 +0800</pubDate><ttl>250</ttl><atom:link href="https://cnsuer.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://cnsuer.github.io/articles/modulemap</guid><title>动态库中中使用modulemap使OC与Swift互相调用</title><description></description><link>https://cnsuer.github.io/articles/modulemap</link><pubDate>Tue, 22 Aug 2023 00:00:00 +0800</pubDate><content:encoded><![CDATA[<h1>动态库中使用modulemap使OC与Swift互相调用</h1><pre><code># 动态库中OC如何与Swift互相调用
在RFramework使用过程中,遇到了一个难以复现的问题,再所以需要对SDK添加Log进行监控,经过调研,决定引入`<span class="type">CocoaLumberjack</span>`这个日志库,但因为SDK本身有一些Swift的代码,现在加入这个日志库后,需要Swift中的代码调用这个日志库了,所以

### <span class="number">1</span>. **<span class="type">ObjC</span> 调用 <span class="type">Swift</span>**

在Framework中实现 <span class="type">ObjC</span> 调用 <span class="type">Swift</span>,和平时在项目中那样,过设置`<span class="type">Swift Compiler</span> -&gt; <span class="type">Objective</span>-<span class="type">C Generated Interface Header Name</span>`就可以了
- 在 <span class="type">Build Setting</span> 中,搜索SWIFT_OBJC_INTERFACE_HEADER_NAME,配置正确的名字,比如默认的`$(<span class="type">SWIFT_MODULE_NAME</span>)-<span class="type">Swift</span>.<span class="property">h</span>`
- 然后在 <span class="type">ObjC</span> 中引入该模块的 <span class="type">Swift</span> 头文件<a href=https://cnsuer.github.io/articles/modulemap>...></a></code></pre><br><br><h3><a href=https://cnsuer.github.io/articles/modulemap>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://cnsuer.github.io/articles/oc-webview-promise</guid><title>OC 代码 webview 执行 JS,如何有效的消除回调地狱</title><description></description><link>https://cnsuer.github.io/articles/oc-webview-promise</link><pubDate>Sat, 22 Jul 2023 00:00:00 +0800</pubDate><content:encoded><![CDATA[<h1>OC 代码 webview 执行 JS,如何有效的消除回调地狱</h1><p>在项目中,偶发的报一个 JS 错误 <code>A lavaScript exception occurred</code> ,找到这段的具体实现</p><pre><code>const scrDom = document.<span class="call">createElement</span>(<span class="string">"script"</span>);
scrDom.<span class="property">src</span> = basic.<span class="property">min</span>.<span class="property">js</span>;
scrDom.<span class="call">addEventListener</span>(<span class="string">"load"</span>, () =&gt; {
  <span class="keyword">if</span> (!haveMacJS) {
    window.<span class="property">webkit</span>.<span class="property">messageHandlers</span>.<span class="property">setPlanSucceed</span>.<span class="call">postMessage</span>(<span class="string">""</span>);
  }
});
const macScrDom = document.<span class="call">createElement</span>(<span class="string">"script"</span>);
macScrDom.<span class="property">src</span> = mac.<span class="property">min</span>.<span class="property">js</span>;
macScrDom.<span class="call">addEventListener</span>(<span class="string">"load"</span>, () =&gt; {
  window.<span class="property">webkit</span>.<span class="property">mess<a href=https://cnsuer.github.io/articles/oc-webview-promise>...></a></span></code></pre><br><br><h3><a href=https://cnsuer.github.io/articles/oc-webview-promise>查看全文</a></h3>]]></content:encoded></item></channel></rss>